{"version":3,"sources":["Components/Header.js","Components/ButtonGroup.js","Components/PopUp.js","Components/Submit.js","Components/DragDrop.js","Components/TableSet.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Navbar","fixed","dark","color","NavbarBrand","id","src","logo","alt","title","height","width","DataButton","useState","dropdownOpen","setOpen","check","ButtonDropdown","isOpen","toggle","Button","idButton","onClick","value","DropdownToggle","caret","DropdownMenu","DropdownItem","header","meaning","DataSet","i","item","this","key","Property","Meaning","enablemeaning","rows","length","Level","String","level","push","renderButton","Component","PopUp","Modal","ModalHeader","ModalBody","msg","ModalFooter","Submit","text","onclick","variant","size","block","DragDrop","list","data","setList","ondrag","map","cbelief","belief","TableSet","k","scope","Table","striped","heads","App","state","modal","selected","config","titlehead","initial","Welcome","selectedoutof","buttongroup","dragdrop","tableset","drgdrpset","bind","updateSelection","submit","levelCheck","apiUrl","fetch","then","response","json","setState","$","attr","icon","branding","name","property","document","getElementById","levelDetails","rule","Status","count","style","backgroundColor","testItem","Object","assign","alert","updateStatusLevel","Ordering","Result","parseInt","btngrp","drgdrp","tblst","dropdown","newState","tableheads","temp","outoftext","popup","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","category","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9740340e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Navbar,NavbarBrand} from 'reactstrap';\r\nconst Header = (props) => {\r\n    return (<div className=\"Header\" >\r\n    <Navbar fixed=\"top\" dark color =\"dark\" >\r\n      <div className=\"container\">\r\n        <NavbarBrand ><div id=\"logo\"><img src={props.logo} alt={props.title} height=\"70\" width=\"70\" /></div><div id=\"heading\">{props.title}</div></NavbarBrand>\r\n      </div>\r\n    </Navbar>\r\n</div>);\r\n}\r\n\r\nexport default Header;","import React,{Component,useState} from 'react';\r\nimport '../App.css'\r\nimport {Button,ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n\r\nfunction DataButton(props) {\r\n  const [dropdownOpen, setOpen] = useState(false);\r\n\r\n  const toggle = () => setOpen(!dropdownOpen);\r\n    if(props.check)\r\n    return (\r\n      <ButtonDropdown isOpen={dropdownOpen} toggle={toggle}>\r\n        <Button className=\"itemButton\" id={props.idButton} onClick={props.onClick}>{props.value}</Button>\r\n        <DropdownToggle caret color=\"primary\" />\r\n        <DropdownMenu>\r\n            <DropdownItem header>{props.meaning}</DropdownItem>\r\n        </DropdownMenu>\r\n    </ButtonDropdown>\r\n    );\r\n    else\r\n    return (\r\n      <Button className=\"itemButton\" id={props.idButton} onClick={props.onClick}>{props.value}</Button>\r\n    );\r\n  }\r\n  class DataSet extends Component {\r\n    renderButton(i){\r\n      let item=this.props.item;\r\n      let idButton=\"qual_\"+i;\r\n      return (\r\n        <DataButton\r\n            key={idButton}\r\n            idButton={idButton}\r\n            value={item[i].Property}\r\n            meaning={item[i].Meaning}\r\n            check={this.props.enablemeaning}\r\n            onClick={() => this.props.onClick(i)}\r\n          />\r\n      )\r\n    }\r\n    render() {\r\n      const rows=[];\r\n      var i;    \r\n      for (i=0;i<this.props.item.length;i++)\r\n        {\r\n          if(this.props.item[i].Level===String(this.props.level)){\r\n              rows.push(\r\n              this.renderButton(i)\r\n              );\r\n          }\r\n        }\r\n        return (<div className=\"itemGroup\">{rows}</div>)\r\n    }\r\n  }\r\n\r\nexport default DataSet;","import React,{Component } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\n\r\nclass PopUp extends Component{\r\n    render(){\r\n        return (\r\n        <Modal isOpen={this.props.isOpen} toggle={this.props.toggle}>\r\n          <ModalHeader><img src={this.props.logo} alt={this.props.title} height=\"70\" width=\"70\" />{this.props.title}</ModalHeader>\r\n          <ModalBody>{this.props.msg}</ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={this.props.toggle}>OK</Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PopUp;","import React,{Component } from 'react';\r\nimport '../App.css';\r\nimport { Button,Navbar} from 'reactstrap';\r\n\r\nclass Submit extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"Footer\">\r\n                <Navbar fixed=\"bottom\" dark color=\"dark\" text=\"light\">\r\n                    <Button onClick={this.props.onclick} variant=\"dark\" size=\"lg\" block>Submit {this.props.msg}</Button>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Submit;","import React, { Component } from \"react\";\r\nimport '../App.css'\r\nimport { ReactSortable } from \"react-sortablejs\";\r\n\r\nclass DragDrop extends Component{\r\n  render() {\r\n    return (\r\n      <div className=\"dragdrop\">\r\n      <ReactSortable\r\n        list={this.props.data}\r\n        setList={this.props.ondrag}\r\n      >\r\n        {this.props.data.map(item => (\r\n          <div key={item.cbelief} className=\"drgdrpdiv\">{item.belief}</div>\r\n        ))}\r\n      </ReactSortable>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default DragDrop;","import React,{Component } from 'react';\r\nimport '../App.css';\r\nimport {Table} from 'reactstrap';\r\nclass TableSet extends Component {\r\n    render() {\r\n      var i,k=1;\r\n      const rows=[];\r\n      for(i=0;i<this.props.data.length;i++){\r\n          rows.push(\r\n            <tr key={i}>\r\n              <th scope=\"row\">{k}</th>\r\n              <td>{this.props.data[i].belief}</td>\r\n              <td>{this.props.data[i].cbelief}</td>\r\n            </tr>\r\n          )\r\n          k++;\r\n      }\r\n      return (<div className=\"tableset\">\r\n      <Table striped>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>{this.props.heads[0]}</th>\r\n            <th>{this.props.heads[1]}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{rows}</tbody>\r\n      </Table>\r\n      </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default TableSet;","import React,{Component } from 'react';\r\nimport './App.css';\r\nimport $ from 'jquery';\r\nimport Header from './Components/Header';\r\nimport DataSet from './Components/ButtonGroup';\r\nimport PopUp from './Components/PopUp';\r\nimport Submit from './Components/Submit';\r\nimport DragDrop from './Components/DragDrop';\r\nimport TableSet from './Components/TableSet';\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modal: true,\r\n      item:[],\r\n      selected:0,\r\n      config:{},\r\n      level:1,\r\n      titlehead:props.initial.heads.Welcome,\r\n      msg:\"\",\r\n      selectedoutof:\"\",\r\n      buttongroup:true,\r\n      dragdrop:false,\r\n      tableset:false,\r\n      drgdrpset:[]\r\n    };\r\n    this.toggle=this.toggle.bind(this);\r\n    this.updateSelection=this.updateSelection.bind(this);\r\n    this.submit = this.submit.bind(this);\r\n    this.levelCheck = this.levelCheck.bind(this);\r\n  }\r\n\r\n  static getDerivedStateFromProps(props,state){\r\n    var temp=\"\",outoftext=\"\";\r\n    if(state.level===1)\r\n    temp=props.initial.popup[0];\r\n    else if(state.level===(props.initial.levelDetails.length+1))\r\n    temp=props.initial.popup[1];\r\n    else\r\n    temp=\"Select \"+props.initial.levelDetails[state.level-1].rule+\" \"+props.initial.levelDetails[state.level-1].count+\" \"+props.initial.title;\r\n    if(state.level===1)\r\n    outoftext=state.selected+\"/\"+state.item.length;\r\n    else if(state.level<=props.initial.levelDetails.length)\r\n    outoftext=state.selected+\"/\"+props.initial.levelDetails[state.level-1].count\r\n    return {\r\n      config:props.initial,\r\n      msg:temp,\r\n      selectedoutof:outoftext\r\n    };\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    const apiUrl = this.props.initial.apiUrl;\r\n    fetch(apiUrl)\r\n      .then((response) => response.json())\r\n      .then((data) => this.setState({item:data}));\r\n    $(\"#favlogo\").attr('href',this.state.config.icon);\r\n    $(\"#title\").text(this.state.config.branding.name);\r\n  }\r\n  toggle(){\r\n    this.setState({\r\n      modal: !this.state.modal\r\n    });\r\n  }\r\n  updateSelection(i){\r\n    let property = document.getElementById('qual_'+i);\r\n    if(this.state.config.levelDetails[this.state.level-1].rule===\"exact\" && this.state.item[i].Status==='0' && this.state.config.levelDetails[this.state.level-1].count===this.state.selected){\r\n      alert(\"You can't select more than \"+this.state.selected+\" beliefs\");\r\n      return;\r\n    }\r\n    else if(this.state.item[i].Status==='0')\r\n    {\r\n      property.style.backgroundColor=\"#00cc00\";\r\n      let testItem = Object.assign({}, this.state);\r\n      testItem.item[i].Status = \"1\";\r\n      testItem.selected+=1;\r\n      this.setState(testItem);\r\n    }\r\n    else if(this.state.item[i].Status==='1')\r\n    {\r\n      property.style.backgroundColor=\"#0000FF\";\r\n      let testItem = Object.assign({}, this.state);\r\n      testItem.item[i].Status = \"0\";\r\n      testItem.selected-=1;\r\n      this.setState(testItem);\r\n    }\r\n  }\r\n  levelCheck(){\r\n    if(this.state.config.levelDetails[this.state.level-1].rule===\"minimum\" && this.state.config.levelDetails[this.state.level-1].count<=this.state.selected)\r\n    {\r\n         return \"true\";\r\n    }\r\n     else if(this.state.config.levelDetails[this.state.level-1].rule===\"exact\" && this.state.config.levelDetails[this.state.level-1].count===this.state.selected)\r\n    {\r\n        return \"true\";\r\n    }\r\n    else\r\n    return \"false\";\r\n  }\r\n  submit(){\r\n    var i;\r\n    if(this.state.level<this.state.config.levelDetails.length){\r\n      if (this.levelCheck()===\"true\")\r\n      {                                         \r\n        this.updateStatusLevel();\r\n      }\r\n    }\r\n    else if(this.state.level===this.state.config.levelDetails.length)\r\n    {\r\n      if (this.levelCheck()===\"true\")\r\n      var testItem = Object.assign({}, this.state);\r\n        testItem.buttongroup= false;\r\n        testItem.titlehead=testItem.config.heads.Ordering;\r\n        testItem.dragdrop=true;\r\n        testItem.level+=1;\r\n        testItem.modal=true;\r\n        for(i=0;i<testItem.item.length;i++)\r\n        {\r\n          if(testItem.item[i].Status==='1')\r\n          {\r\n             testItem.drgdrpset.push(\r\n               {\"belief\":testItem.item[i].Property,\"cbelief\":testItem.item[i].Meaning}\r\n             )\r\n          }\r\n        }\r\n      this.setState(testItem);\r\n    }\r\n    else\r\n    {\r\n      testItem = Object.assign({}, this.state);\r\n      testItem.titlehead=testItem.config.heads.Result;\r\n      testItem.tableset= true;\r\n      testItem.dragdrop=false;\r\n      this.setState(testItem);\r\n    }\r\n  }\r\n  updateStatusLevel()\r\n  {\r\n    var i;\r\n    let testItem = Object.assign({}, this.state);\r\n    testItem.selected=0;\r\n    testItem.level+=1;\r\n    testItem.modal=true;\r\n    for(i=0;i<this.state.item.length;i++)\r\n    {\r\n      if(this.state.item[i].Status==='1')\r\n      {\r\n        testItem.item[i].Level=String(parseInt(testItem.item[i].Level)+1);\r\n        testItem.item[i].Status='0';\r\n        document.getElementById('qual_'+i).style.backgroundColor=\"#0000FF\";\r\n      }\r\n    }\r\n    this.setState(testItem);\r\n  }\r\n\r\n\r\n  render() {\r\n    let btngrp,drgdrp,tblst;\r\n    if (this.state.buttongroup)\r\n      btngrp = <DataSet item={this.state.item} onClick={(i) => this.updateSelection(i)} level={this.state.level} enablemeaning={this.state.config.dropdown}/>;\r\n    if (this.state.dragdrop)\r\n      drgdrp= <DragDrop data={this.state.drgdrpset} ondrag={newState => {this.setState({ drgdrpset: newState })}}/>;\r\n    if (this.state.tableset)\r\n      tblst= <TableSet data={this.state.drgdrpset} heads={this.state.config.tableheads}/>;\r\n    return (<div>\r\n    <Header logo={this.state.config.icon} title={this.state.titlehead}/>\r\n    <PopUp isOpen={this.state.modal} toggle={this.toggle} logo={this.props.initial.icon} title={this.state.config.branding.name} msg={this.state.msg}/>\r\n    {btngrp}\r\n    {drgdrp}\r\n    {tblst}\r\n    <Submit onclick={this.submit} msg={this.state.selectedoutof}/>\r\n    </div>\r\n    )}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst config = {\r\n  branding: {\"name\" : \"SkillPill\" },\r\n  heads:{\"Welcome\":\"Select your Beliefs\",\r\n  \"Ordering\":\"Prioritise your beliefs\",\r\n  \"Result\":\"Congratulations these are your Beliefs\"},\r\n  dropdown:true,\r\n  tableheads:[\"Beliefs\",\"Counter Belief\"],\r\n  popup:[\r\n    \"Select as many beliefs as you resonate with\",\r\n    \"Use drag and drop to arrange these Beliefs in the order of importance they hold for you\"\r\n  ],\r\n\ttitle: \"Beliefs\",\r\n\tcategory: \"Baselines\",\r\n\ticon: \"./skillpill.png\",\r\n  apiUrl: \"https://ix61k6qun9.execute-api.ap-southeast-1.amazonaws.com/prod/lifetoolsdataset?category=Baselines\",\r\n\tlevelDetails: [{count:3 ,rule: \"minimum\" }, \r\n\t\t\t\t   {count:2, rule: \"exact\"},\r\n                   {count:1, rule: \"exact\"}]\r\n};\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App initial={config}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}